// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/saeedjhn/go-backend-clean-arch/internal/entity"
	auth "github.com/saeedjhn/go-backend-clean-arch/internal/usecase/auth"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthInteractor is an autogenerated mock type for the AuthInteractor type
type MockAuthInteractor struct {
	mock.Mock
}

type MockAuthInteractor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthInteractor) EXPECT() *MockAuthInteractor_Expecter {
	return &MockAuthInteractor_Expecter{mock: &_m.Mock}
}

// CreateAccessToken provides a mock function with given fields: req
func (_m *MockAuthInteractor) CreateAccessToken(req entity.Authenticable) (string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Authenticable) (string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(entity.Authenticable) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entity.Authenticable) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthInteractor_CreateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessToken'
type MockAuthInteractor_CreateAccessToken_Call struct {
	*mock.Call
}

// CreateAccessToken is a helper method to define mock.On call
//   - req entity.Authenticable
func (_e *MockAuthInteractor_Expecter) CreateAccessToken(req interface{}) *MockAuthInteractor_CreateAccessToken_Call {
	return &MockAuthInteractor_CreateAccessToken_Call{Call: _e.mock.On("CreateAccessToken", req)}
}

func (_c *MockAuthInteractor_CreateAccessToken_Call) Run(run func(req entity.Authenticable)) *MockAuthInteractor_CreateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Authenticable))
	})
	return _c
}

func (_c *MockAuthInteractor_CreateAccessToken_Call) Return(_a0 string, _a1 error) *MockAuthInteractor_CreateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthInteractor_CreateAccessToken_Call) RunAndReturn(run func(entity.Authenticable) (string, error)) *MockAuthInteractor_CreateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRefreshToken provides a mock function with given fields: req
func (_m *MockAuthInteractor) CreateRefreshToken(req entity.Authenticable) (string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Authenticable) (string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(entity.Authenticable) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entity.Authenticable) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthInteractor_CreateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefreshToken'
type MockAuthInteractor_CreateRefreshToken_Call struct {
	*mock.Call
}

// CreateRefreshToken is a helper method to define mock.On call
//   - req entity.Authenticable
func (_e *MockAuthInteractor_Expecter) CreateRefreshToken(req interface{}) *MockAuthInteractor_CreateRefreshToken_Call {
	return &MockAuthInteractor_CreateRefreshToken_Call{Call: _e.mock.On("CreateRefreshToken", req)}
}

func (_c *MockAuthInteractor_CreateRefreshToken_Call) Run(run func(req entity.Authenticable)) *MockAuthInteractor_CreateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Authenticable))
	})
	return _c
}

func (_c *MockAuthInteractor_CreateRefreshToken_Call) Return(_a0 string, _a1 error) *MockAuthInteractor_CreateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthInteractor_CreateRefreshToken_Call) RunAndReturn(run func(entity.Authenticable) (string, error)) *MockAuthInteractor_CreateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ParseToken provides a mock function with given fields: secret, requestToken
func (_m *MockAuthInteractor) ParseToken(secret string, requestToken string) (*auth.Claims, error) {
	ret := _m.Called(secret, requestToken)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 *auth.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*auth.Claims, error)); ok {
		return rf(secret, requestToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) *auth.Claims); ok {
		r0 = rf(secret, requestToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(secret, requestToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthInteractor_ParseToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToken'
type MockAuthInteractor_ParseToken_Call struct {
	*mock.Call
}

// ParseToken is a helper method to define mock.On call
//   - secret string
//   - requestToken string
func (_e *MockAuthInteractor_Expecter) ParseToken(secret interface{}, requestToken interface{}) *MockAuthInteractor_ParseToken_Call {
	return &MockAuthInteractor_ParseToken_Call{Call: _e.mock.On("ParseToken", secret, requestToken)}
}

func (_c *MockAuthInteractor_ParseToken_Call) Run(run func(secret string, requestToken string)) *MockAuthInteractor_ParseToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthInteractor_ParseToken_Call) Return(_a0 *auth.Claims, _a1 error) *MockAuthInteractor_ParseToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthInteractor_ParseToken_Call) RunAndReturn(run func(string, string) (*auth.Claims, error)) *MockAuthInteractor_ParseToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthInteractor creates a new instance of MockAuthInteractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthInteractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthInteractor {
	mock := &MockAuthInteractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
