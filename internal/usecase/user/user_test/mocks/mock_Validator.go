// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	dtouser "github.com/saeedjhn/go-backend-clean-arch/internal/dto/user"
	mock "github.com/stretchr/testify/mock"

	task "github.com/saeedjhn/go-backend-clean-arch/internal/dto/task"
)

// MockValidator is an autogenerated mock type for the Validator type
type MockValidator struct {
	mock.Mock
}

type MockValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValidator) EXPECT() *MockValidator_Expecter {
	return &MockValidator_Expecter{mock: &_m.Mock}
}

// ValidateCreateTaskRequest provides a mock function with given fields: req
func (_m *MockValidator) ValidateCreateTaskRequest(req task.CreateRequest) (map[string]string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ValidateCreateTaskRequest")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(task.CreateRequest) (map[string]string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(task.CreateRequest) map[string]string); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(task.CreateRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidator_ValidateCreateTaskRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateCreateTaskRequest'
type MockValidator_ValidateCreateTaskRequest_Call struct {
	*mock.Call
}

// ValidateCreateTaskRequest is a helper method to define mock.On call
//   - req task.CreateRequest
func (_e *MockValidator_Expecter) ValidateCreateTaskRequest(req interface{}) *MockValidator_ValidateCreateTaskRequest_Call {
	return &MockValidator_ValidateCreateTaskRequest_Call{Call: _e.mock.On("ValidateCreateTaskRequest", req)}
}

func (_c *MockValidator_ValidateCreateTaskRequest_Call) Run(run func(req task.CreateRequest)) *MockValidator_ValidateCreateTaskRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(task.CreateRequest))
	})
	return _c
}

func (_c *MockValidator_ValidateCreateTaskRequest_Call) Return(_a0 map[string]string, _a1 error) *MockValidator_ValidateCreateTaskRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidator_ValidateCreateTaskRequest_Call) RunAndReturn(run func(task.CreateRequest) (map[string]string, error)) *MockValidator_ValidateCreateTaskRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateLoginRequest provides a mock function with given fields: req
func (_m *MockValidator) ValidateLoginRequest(req dtouser.LoginRequest) (map[string]string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ValidateLoginRequest")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(dtouser.LoginRequest) (map[string]string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(dtouser.LoginRequest) map[string]string); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(dtouser.LoginRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidator_ValidateLoginRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateLoginRequest'
type MockValidator_ValidateLoginRequest_Call struct {
	*mock.Call
}

// ValidateLoginRequest is a helper method to define mock.On call
//   - req dtouser.LoginRequest
func (_e *MockValidator_Expecter) ValidateLoginRequest(req interface{}) *MockValidator_ValidateLoginRequest_Call {
	return &MockValidator_ValidateLoginRequest_Call{Call: _e.mock.On("ValidateLoginRequest", req)}
}

func (_c *MockValidator_ValidateLoginRequest_Call) Run(run func(req dtouser.LoginRequest)) *MockValidator_ValidateLoginRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dtouser.LoginRequest))
	})
	return _c
}

func (_c *MockValidator_ValidateLoginRequest_Call) Return(_a0 map[string]string, _a1 error) *MockValidator_ValidateLoginRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidator_ValidateLoginRequest_Call) RunAndReturn(run func(dtouser.LoginRequest) (map[string]string, error)) *MockValidator_ValidateLoginRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateProfileRequest provides a mock function with given fields: req
func (_m *MockValidator) ValidateProfileRequest(req dtouser.ProfileRequest) (map[string]string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ValidateProfileRequest")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(dtouser.ProfileRequest) (map[string]string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(dtouser.ProfileRequest) map[string]string); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(dtouser.ProfileRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidator_ValidateProfileRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateProfileRequest'
type MockValidator_ValidateProfileRequest_Call struct {
	*mock.Call
}

// ValidateProfileRequest is a helper method to define mock.On call
//   - req dtouser.ProfileRequest
func (_e *MockValidator_Expecter) ValidateProfileRequest(req interface{}) *MockValidator_ValidateProfileRequest_Call {
	return &MockValidator_ValidateProfileRequest_Call{Call: _e.mock.On("ValidateProfileRequest", req)}
}

func (_c *MockValidator_ValidateProfileRequest_Call) Run(run func(req dtouser.ProfileRequest)) *MockValidator_ValidateProfileRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dtouser.ProfileRequest))
	})
	return _c
}

func (_c *MockValidator_ValidateProfileRequest_Call) Return(_a0 map[string]string, _a1 error) *MockValidator_ValidateProfileRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidator_ValidateProfileRequest_Call) RunAndReturn(run func(dtouser.ProfileRequest) (map[string]string, error)) *MockValidator_ValidateProfileRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRefreshTokenRequest provides a mock function with given fields: req
func (_m *MockValidator) ValidateRefreshTokenRequest(req dtouser.RefreshTokenRequest) (map[string]string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRefreshTokenRequest")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(dtouser.RefreshTokenRequest) (map[string]string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(dtouser.RefreshTokenRequest) map[string]string); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(dtouser.RefreshTokenRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidator_ValidateRefreshTokenRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRefreshTokenRequest'
type MockValidator_ValidateRefreshTokenRequest_Call struct {
	*mock.Call
}

// ValidateRefreshTokenRequest is a helper method to define mock.On call
//   - req dtouser.RefreshTokenRequest
func (_e *MockValidator_Expecter) ValidateRefreshTokenRequest(req interface{}) *MockValidator_ValidateRefreshTokenRequest_Call {
	return &MockValidator_ValidateRefreshTokenRequest_Call{Call: _e.mock.On("ValidateRefreshTokenRequest", req)}
}

func (_c *MockValidator_ValidateRefreshTokenRequest_Call) Run(run func(req dtouser.RefreshTokenRequest)) *MockValidator_ValidateRefreshTokenRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dtouser.RefreshTokenRequest))
	})
	return _c
}

func (_c *MockValidator_ValidateRefreshTokenRequest_Call) Return(_a0 map[string]string, _a1 error) *MockValidator_ValidateRefreshTokenRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidator_ValidateRefreshTokenRequest_Call) RunAndReturn(run func(dtouser.RefreshTokenRequest) (map[string]string, error)) *MockValidator_ValidateRefreshTokenRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRegisterRequest provides a mock function with given fields: req
func (_m *MockValidator) ValidateRegisterRequest(req dtouser.RegisterRequest) (map[string]string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRegisterRequest")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(dtouser.RegisterRequest) (map[string]string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(dtouser.RegisterRequest) map[string]string); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(dtouser.RegisterRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidator_ValidateRegisterRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRegisterRequest'
type MockValidator_ValidateRegisterRequest_Call struct {
	*mock.Call
}

// ValidateRegisterRequest is a helper method to define mock.On call
//   - req dtouser.RegisterRequest
func (_e *MockValidator_Expecter) ValidateRegisterRequest(req interface{}) *MockValidator_ValidateRegisterRequest_Call {
	return &MockValidator_ValidateRegisterRequest_Call{Call: _e.mock.On("ValidateRegisterRequest", req)}
}

func (_c *MockValidator_ValidateRegisterRequest_Call) Run(run func(req dtouser.RegisterRequest)) *MockValidator_ValidateRegisterRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dtouser.RegisterRequest))
	})
	return _c
}

func (_c *MockValidator_ValidateRegisterRequest_Call) Return(_a0 map[string]string, _a1 error) *MockValidator_ValidateRegisterRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidator_ValidateRegisterRequest_Call) RunAndReturn(run func(dtouser.RegisterRequest) (map[string]string, error)) *MockValidator_ValidateRegisterRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockValidator creates a new instance of MockValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValidator {
	mock := &MockValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
