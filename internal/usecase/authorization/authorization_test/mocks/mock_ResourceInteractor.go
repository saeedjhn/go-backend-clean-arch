// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockResourceInteractor is an autogenerated mock type for the ResourceInteractor type
type MockResourceInteractor struct {
	mock.Mock
}

type MockResourceInteractor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceInteractor) EXPECT() *MockResourceInteractor_Expecter {
	return &MockResourceInteractor_Expecter{mock: &_m.Mock}
}

// GetIDByName provides a mock function with given fields: ctx, name
func (_m *MockResourceInteractor) GetIDByName(ctx context.Context, name string) (uint64, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetIDByName")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint64, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceInteractor_GetIDByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIDByName'
type MockResourceInteractor_GetIDByName_Call struct {
	*mock.Call
}

// GetIDByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockResourceInteractor_Expecter) GetIDByName(ctx interface{}, name interface{}) *MockResourceInteractor_GetIDByName_Call {
	return &MockResourceInteractor_GetIDByName_Call{Call: _e.mock.On("GetIDByName", ctx, name)}
}

func (_c *MockResourceInteractor_GetIDByName_Call) Run(run func(ctx context.Context, name string)) *MockResourceInteractor_GetIDByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockResourceInteractor_GetIDByName_Call) Return(_a0 uint64, _a1 error) *MockResourceInteractor_GetIDByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceInteractor_GetIDByName_Call) RunAndReturn(run func(context.Context, string) (uint64, error)) *MockResourceInteractor_GetIDByName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResourceInteractor creates a new instance of MockResourceInteractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceInteractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceInteractor {
	mock := &MockResourceInteractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
