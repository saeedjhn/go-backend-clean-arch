services:
  ####################### APPLICATION ##################################################################################
  app:
    image: go-backend-clean-arch_app:0.1.0-dev
    build:
      context: ../..
      target: dev # For Development
      dockerfile: deployments/development/Dockerfile
    container_name: go-backend-clean-arch_app-dev
    ports:
      - "8000:8000"
      - "50000:50000"
    volumes:
      - ../../:/app # important (- ./:/app)
    networks:
      - go-backend-clean-arch_network
    depends_on:
      - mysqldb
      - redis

      #  app-prod:
      #    build:
      #      context: ..
      #      dockerfile: ./deployments/Dockerfile
      #      target: prod # For Production

  ####################### SETUP-DB #####################################################################################
  ######################## MYSQL ########################
  mysqldb:
    image: mysql:latest
    container_name: go-backend-clean-arch_mysqldb
    env_file:
      - .env
    command: [ 'mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci' ]
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - mysql:/var/lib/mysql
    networks:
      - go-backend-clean-arch_network
    restart: always

  ####################### POSTGRES #######################
  #  psqldb:
  #    image: postgres:latest
  #    container_name: go-backend-clean-arch_psqldb
  #    env_file:
  #      - .env
  #    ports:
  #      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
  #    volumes:
  #      - psql:/var/lib/psql/data
  #    networks:
  #      - go-backend-clean-arch_network
  #    restart: always

  ####################### MONOGO #######################
  #  mongodb:
  #    image: mongo:latest
  #    container_name: go-backend-clean-arch_mongodb
  #    environment:
  #      MONGO_INITDB_ROOT_USERNAME: admin
  #      MONGO_INITDB_ROOT_PASSWORD: 123456
  #    ports:
  #      - "27017:27017"
  #    volumes:
  #      - mongo:/data/db
  #    networks:
  #      - go-backend-clean-arch_network
  #    restart: unless-stopped

  ####################### PGADMIN #######################
  #  pgadmin:
  #    image: dpage/pgadmin4
  #    environment:
  #      PGADMIN_DEFAULT_EMAIL: ghafbu@gmail.com
  #      PGADMIN_DEFAULT_PASSWORD: 123456
  #    volumes:
  #      - pgadmin:/var/lib/pgadmin/data
  #    ports:
  #      - "5002:80"
  #    networks:
  #      - go-backend-clean-arch_network
  #    depends_on:
  #      - psqldb
  #    restart: unless-stopped

  ####################### REDIS #######################
  redis:
    image: redis:latest
    container_name: go-backend-clean-arch_redis
    env_file:
      - .env
    command: redis-server --loglevel warning --save 60 1 --requirepass "password123"
    volumes:
      - redis:/var/lib/redis/data
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - go-backend-clean-arch_network
  ####################### END SETUP-DB #################################################################################

  ####################### JAEGER #######################
  jaeger:
    image: jaegertracing/all-in-one:1.63.0
    container_name: go-backend-clean-arch_jaeger
    env_file:
      - .env
    ports:
      - "16686:16686"   # Jaeger UI port
      - "14268:14268"   # accept jaeger.thrift directly from clients
      - "14250:14250"   # accept model.proto
      - "4317:4317"     # accept OpenTelemetry Protocol (OTLP) over gRPC
      - "4318:4318"     # accept OpenTelemetry Protocol (OTLP) over HTTP
    #      - "9411:9411"     # Zipkin compatible endpoint (optional)
    networks:
      - go-backend-clean-arch_network
    restart: always

  ####################### SETUP-ELK ####################################################################################
  #  setup-elk:
  #    build:
  #      context: elk/setup/
  #      args:
  #        ELASTIC_VERSION: ${ELASTIC_VERSION}
  #    container_name: go-backend-clean-arch_setup-elk
  #    init: true
  #    environment:
  #      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
  #      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
  #      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
  #    volumes:
  #      - ./elk/setup/entrypoint.sh:/entrypoint.sh:ro,Z
  #      - ./elk/setup/helpers.sh:/helpers.sh:ro,Z
  #      - ./elk/setup/roles:/roles:ro,Z
  #      - setup-elk:/state:Z
  #    networks:
  #      - go-backend-clean-arch_network
  #    depends_on:
  #      - elasticsearch

  ####################### ELASTICSEARCH #######################
  #  elasticsearch:
  #    build:
  #      context: elk/elasticsearch/
  #      args:
  #        ELASTIC_VERSION: ${ELASTIC_VERSION}
  #    container_name: go-backend-clean-arch_elasticsearch
  #    environment:
  #      node.name: elasticsearch
  #      ES_JAVA_OPTS: -Xms512m -Xmx512m
  #      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
  #      discovery.type: single-node
  #    volumes:
  #      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
  #      - elasticsearch:/usr/share/elasticsearch/data:Z
  #    ports:
  #      - "9200:9200"
  #      - "9300:9300"
  #    networks:
  #      - go-backend-clean-arch_network
  #    restart: unless-stopped

  ######################## KIBANA ########################
  #  kibana:
  #    build:
  #      context: elk/kibana/
  #      args:
  #        ELASTIC_VERSION: ${ELASTIC_VERSION}
  #    container_name: go-backend-clean-arch_kibana
  #    environment:
  #      KIBANA_SYSTEM_USERNAME: ${KIBANA_SYSTEM_USERNAME:-}
  #      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
  #    volumes:
  #      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
  #      - elasticsearch:/usr/share/kibana/data:Z
  #    ports:
  #      - "5601:5601"
  #    networks:
  #      - go-backend-clean-arch_network
  #    depends_on:
  #      - elasticsearch
  #    restart: unless-stopped

  ######################## FILEBEAT ########################
  #  filebeat:
  #    build:
  #      context: elk/filebeat/
  #      args:
  #        ELASTIC_VERSION: ${ELASTIC_VERSION}
  #    container_name: go-backend-clean-arch_filebeat
  #    user: root
  #    environment:
  #      FILEBEAT_INTERNAL_USERNAME: ${FILEBEAT_INTERNAL_USERNAME:-}
  #      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
  #      BEATS_SYSTEM_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
  #    command:
  #      - -e
  #      - --strict.perms=false
  #    volumes:
  #      - ./elk/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
  #      - ./../../logs:/var/log/filebeat/go-backend-clean-arch/logs
  #      #- ../prod/filebeatlogs:/var/log/filebeat/service:ro
  #      - filebeat:/var/log/filebeat
  #      - filebeat:/app:ro
  #    networks:
  #      - go-backend-clean-arch_network
  #    depends_on:
  #      - elasticsearch
  ####################### END SETUP-ELK ################################################################################

volumes:
  mysql:
  redis:
  filebeat:
  elasticsearch:
  setup-elk:
  #  psql:
  #  mongo:
  #  pgadmin:


networks:
  go-backend-clean-arch_network:
    driver: bridge
