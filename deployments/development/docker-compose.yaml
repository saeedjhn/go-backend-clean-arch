services:
  ####################### APPLICATION ##################################################################################
  app:
    image: go-backend-clean-arch_app:0.1.0-dev
    build:
      context: ../..
      target: dev # For Development
      dockerfile: deployments/development/Dockerfile
    container_name: go-backend-clean-arch_app-dev
    ports:
      - "${APP_HTTP_PORT}:${APP_HTTP_PORT}"
      - "${APP_GRPC_PORT}:${APP_GRPC_PORT}"
    volumes:
      - ../../:/app # important (- ./:/app)
    networks:
      - go-backend-clean-arch_network
    depends_on:
      - rabbitmq
      - mysqldb
      - redis

  ####################### SETUP-DB #####################################################################################
  ######################## MYSQL ########################
  mysqldb:
    image: mysql:9.1.0
    container_name: go-backend-clean-arch_mysqldb
    env_file:
      - .env
    command: [ 'mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci' ]
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - mysql:/var/lib/mysql
    networks:
      - go-backend-clean-arch_network
    restart: always

  ####################### POSTGRES #######################
  #  psqldb:
  #    image: postgres:latest
  #    container_name: go-backend-clean-arch_psqldb
  #    env_file:
  #      - .env
  #    ports:
  #      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
  #    volumes:
  #      - psql:/var/lib/psql/data
  #    networks:
  #      - go-backend-clean-arch_network
  #    restart: always

  ####################### MONOGO #######################
  #  mongodb:
  #    image: mongo:latest
  #    container_name: go-backend-clean-arch_mongodb
  #    environment:
  #      MONGO_INITDB_ROOT_USERNAME: admin
  #      MONGO_INITDB_ROOT_PASSWORD: 123456
  #    ports:
  #      - "27017:27017"
  #    volumes:
  #      - mongo:/data/db
  #    networks:
  #      - go-backend-clean-arch_network
  #    restart: unless-stopped

  ####################### PGADMIN #######################
  #  pgadmin:
  #    image: dpage/pgadmin4
  #    environment:
  #      PGADMIN_DEFAULT_EMAIL: ghafbu@gmail.com
  #      PGADMIN_DEFAULT_PASSWORD: 123456
  #    volumes:
  #      - pgadmin:/var/lib/pgadmin/data
  #    ports:
  #      - "5002:80"
  #    networks:
  #      - go-backend-clean-arch_network
  #    depends_on:
  #      - psqldb
  #    restart: unless-stopped

  ####################### REDIS #######################
  redis:
    image: redis:7.4.1
    container_name: go-backend-clean-arch_redis
    env_file:
      - .env
    command: redis-server --loglevel warning --save 60 1 --requirepass "password123"
    volumes:
      - redis:/var/lib/redis/data
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - go-backend-clean-arch_network
  ####################### END SETUP-DB #################################################################################

  ####################### RabbitMQ #######################
  rabbitmq:
    image: rabbitmq:4.0.5-management
    container_name: go-backend-clean-arch_rabbitmq
    env_file:
      - .env
    ports:
      - "${RABBIT_PORT}:${RABBIT_PORT}"
      - "${RABBIT_UI_PORT}:${RABBIT_UI_PORT}"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - go-backend-clean-arch_network
    restart: always

  ####################### JAEGER #######################
  jaeger:
    image: jaegertracing/all-in-one:1.64.0
    container_name: go-backend-clean-arch_jaeger
    env_file:
      - .env
    ports:
      - "16686:16686"   # Jaeger UI port
      - "14268:14268"   # accept jaeger.thrift directly from clients
      - "14250:14250"   # accept model.proto
      #      - "4317:4317"     # accept OpenTelemetry Protocol (OTLP) over gRPC
      - "4318:4318"     # accept OpenTelemetry Protocol (OTLP) over HTTP
      #      - "9411:9411"     # Zipkin compatible endpoint (optional)
    networks:
      - go-backend-clean-arch_network
    restart: always

  ####################### SETUP-ELK ####################################################################################
  #  setup-elk:
  #    build:
  #      context: elk/setup/
  #      args:
  #        ELASTIC_VERSION: ${ELASTIC_VERSION}
  #    image: go-backend-clean-arch-setup-elk:1.0.0
  #    container_name: go-backend-clean-arch_setup-elk
  #    init: true
  #    environment:
  #      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
  #      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
  #      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
  #    volumes:
  #      - ./elk/setup/entrypoint.sh:/entrypoint.sh:ro,Z
  #      - ./elk/setup/helpers.sh:/helpers.sh:ro,Z
  #      - ./elk/setup/roles:/roles:ro,Z
  #      - setup-elk:/state:Z
  #    networks:
  #      - go-backend-clean-arch_network
  #    depends_on:
  #      - elasticsearch

  ####################### ELASTICSEARCH #######################
  #  elasticsearch:
  #    build:
  #      context: elk/elasticsearch/
  #      args:
  #        ELASTIC_VERSION: ${ELASTIC_VERSION}
  #    image: go-backend-clean-arch-elasticsearch:1.0.0
  #    container_name: go-backend-clean-arch_elasticsearch
  #    environment:
  #      node.name: elasticsearch
  #      ES_JAVA_OPTS: -Xms512m -Xmx512m
  #      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
  #      discovery.type: single-node
  #    volumes:
  #      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
  #      - elasticsearch:/usr/share/elasticsearch/data:Z
  #    ports:
  #      - "9200:9200"
  #      - "9300:9300"
  #    networks:
  #      - go-backend-clean-arch_network
  #    restart: unless-stopped

  ######################## KIBANA ########################
  #  kibana:
  #    build:
  #      context: elk/kibana/
  #      args:
  #        ELASTIC_VERSION: ${ELASTIC_VERSION}
  #    image: go-backend-clean-arch-kibana:1.0.0
  #    container_name: go-backend-clean-arch_kibana
  #    environment:
  #      KIBANA_SYSTEM_USERNAME: ${KIBANA_SYSTEM_USERNAME:-}
  #      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
  #    volumes:
  #      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
  #      - elasticsearch:/usr/share/kibana/data:Z
  #    ports:
  #      - "${KIBANA_SYSTEM_PORT}:${KIBANA_SYSTEM_PORT}"
  #    networks:
  #      - go-backend-clean-arch_network
  #    depends_on:
  #      - elasticsearch
  #    restart: unless-stopped

  ######################## FILEBEAT ########################
  #  filebeat:
  #    build:
  #      context: elk/filebeat/
  #      args:
  #        ELASTIC_VERSION: ${ELASTIC_VERSION}
  #    image: go-backend-clean-arch-filebeat:1.0.0
  #    container_name: go-backend-clean-arch_filebeat
  #    user: ${FILEBEAT_INTERNAL_USER}
  #    environment:
  #      FILEBEAT_INTERNAL_USERNAME: ${FILEBEAT_INTERNAL_USERNAME:-}
  #      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
  #      BEATS_SYSTEM_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
  #    command:
  #      - -e
  #      - --strict.perms=false
  #    volumes:
  #      - ./elk/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
  #      - ./../../logs:/var/log/filebeat/service/logs
  #      #- ../prod/filebeatlogs:/var/log/filebeat/service:ro
  #      - filebeat:/var/log/filebeat
  #      - filebeat:/app:ro
  #    networks:
  #      - go-backend-clean-arch_network
  #    depends_on:
  #      - elasticsearch

  ####################### END SETUP-ELK ################################################################################

  ####################### SETUP-MONITORING ####################################################################################
  ######################## Prometheus ########################
  prometheus:
    image: prom/prometheus:v3.0.1
    container_name: go-backend-clean-arch_prometheus
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"  # Prometheus Web UI
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - go-backend-clean-arch_network
    restart: always
  #    depends_on:
  #      - node-exporter
  #      - cadvisor

  ######################## OTEL-collector ########################
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.114.0
    container_name: go-backend-clean-arch_otel-collector
    command: [ "--config=/etc/otel-collector.yml" ]
    volumes:
      - ./otel-collector/collector.yml:/etc/otel-collector.yml
    ports:
      - "${OTEL_COLLECTOR_PORT}:${OTEL_COLLECTOR_PORT}"
    networks:
      - go-backend-clean-arch_network

  ######################## Grafana ########################
  grafana:
    image: grafana/grafana:11.4.0
    container_name: go-backend-clean-arch_grafana
    user: '472'
    env_file:
      - .env
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"  # Grafana Web UI
    volumes:
      - grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - go-backend-clean-arch_network
    depends_on:
      - prometheus
    restart: always

  ######################## Alert-manager ########################
  #  alertmanager:
  #    image: prom/alertmanager:v0.28.0
  #    container_name: go-backend-clean-arch_alert-manager
  #    command:
  #      - '--config.file=/etc/alertmanager/config.yml'
  #      - '--storage.path=/alertmanager'
  #    ports:
  #      - "${ALERT_MANAGER_PORT}:${ALERT_MANAGER_PORT}"
  #    volumes:
  #      - ./alertmanager/:/etc/alertmanager/
  #    restart: always

  ######################## Node-exporter ########################
  #  node-exporter:
  #    image: prom/node-exporter:v1.8.2
  #    container_name: go-backend-clean-arch_node-exporter
  #    command:
  #      - '--path.procfs=/host/proc'
  #      - '--path.sysfs=/host/sys'
  #      - --collector.filesystem.ignored-mount-points
  #      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
  #    ports:
  #      - "${NODE_EXPORTER_PORT}:${NODE_EXPORTER_PORT}"
  #    volumes:
  #      - /proc:/host/proc:ro
  #      - /sys:/host/sys:ro
  #      - /:/rootfs:ro
  #    deploy:
  #      mode: global
  #    restart: always

  ######################## Cadvisor ########################
  #  cadvisor:
  #    image: gcr.io/cadvisor/cadvisor:v0.49.2
  #    container_name: go-backend-clean-arch_cadvisor
  #    ports:
  #      - "${CADVISOR_PORT}:${CADVISOR_PORT}"
  #    volumes:
  #      - /:/rootfs
  #      - /var/run:/var/run
  #      - /sys:/sys
  #      - /var/lib/docker/:/var/lib/docker
  #      - /dev/disk/:/dev/disk
  #    privileged: true
  #    devices:
  #      - /dev/kmsg
  #    restart: always

  ####################### END-MONITORING ####################################################################################

  ####################### SETUP-API GATEWAY ####################################################################################
  nginx:
    build:
      context: .
    image: nginx:1.27.3-alpine
    container_name: go-backend-clean-arch_nginx
    ports:
      - "${NGINX_HTTP_PORT}:${NGINX_HTTP_PORT}"
    #      - "${NGINX_HTTPS_PORT}:${NGINX_HTTPS_PORT}"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - go-backend-clean-arch_network
    depends_on:
      - app

volumes:
  mysql:
  redis:
  filebeat:
  elasticsearch:
  setup-elk:
  grafana:
  #  psql:
  #  mongo:
  #  pgadmin:


networks:
  go-backend-clean-arch_network:
    driver: bridge
